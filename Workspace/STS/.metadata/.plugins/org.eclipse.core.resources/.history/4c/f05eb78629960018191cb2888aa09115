package com.curso.fullstack.sopra.mvc.controllers;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.LinkedList;
import java.util.List;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.curso.fullstack.sopra.mvc.dto.Mensaje;
import com.curso.fullstack.sopra.mvc.dto.Persona;
import com.curso.fullstack.sopra.simpsons.mvc.bussines.PersonasServicio;

@RestController
@RequestMapping("/personas") // Identificamos el recurso con el que trabajamos en este servicio
//@Controller //Se 
public class PersonaRestController {
	
	private PersonasServicio personasServicio; 
//@ResponseBody
	@GetMapping("/{id}") // id es una clave primaria, y tiene que ser unica siempre.
	public ResponseEntity<Persona> get(@PathVariable long id, @RequestParam(name="nombre", required=false, defaultValue="World") String nombre) { // Busqueda de persona por id, tipo consulta del CRUD,
																// como no indicamos el @PathVariable (name=), la
		Persona persona = personasServicio.getPersonaById(id);														// variable long se tiene que llamar como la que hemos
		persona.setNombre(nombre);														// puesto en el path
		return new ResponseEntity<Persona>(persona, HttpStatus.OK);
	}

	@GetMapping // No hace falta especificar el path puesto que no hay dos metodos que se llamen
				// igual y que tengan el mismo path
	public ResponseEntity<List<Persona>> get() { // Lista de persona es un get de consulta
		List<Persona> resultado = new LinkedList<Persona>();
		
		resultado.add(new Persona(1,"Paco"));
		resultado.add(new Persona(58,"Torres"));
		
		return new ResponseEntity<List<Persona>>(resultado, HttpStatus.OK);
	}

	@PostMapping
	public ResponseEntity<Void> alta(@RequestBody Persona persona) { // Dar de alta a persona puede ser un PUT si es
																		// generada la
		// primaryKey en el lado del cliente y POST si se autogenera aqui
		HttpHeaders headers = new HttpHeaders(); // Existen un monton de cabeceras, aqui esta vacia
		try {
			headers.setLocation(new URI("http:localhost:8080/personas/1"));// a√±adimos en la localizacion a la cabecera
			return new ResponseEntity<>(headers, HttpStatus.CREATED); // Retornamos una respuesta con el codigo de
																		// status de created y una cabecera

		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR); // Retornamos una respuesta con el codigo de
																			// status de error, no haria falta que
																			// hicieramos esto porque es el que se lanza
																			// por defecto, podriamos propagar el error
																			// con un throws URISyntaxException
		}
	}
	// ResponseEntity<T> es un tipo generic, Se encarga de autogenerar la respuesta
	// metiendo los datos que queremos en el body o cuerpo de la misma

	@DeleteMapping("/{id}")
	public ResponseEntity<Mensaje> delete(@PathVariable long id) {
		return new ResponseEntity<Mensaje>(new Mensaje("Se ha borrado el registro con id:" + id + "."), HttpStatus.OK);
	}
}
